# -*- coding: utf-8 -*-
"""titanic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lxY1vgg3Y6m69TQovD2r5Efe6Lleds3B
"""

import numpy as np
import pandas as pd
import seaborn as sns
from matplotlib import pyplot as plt



from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

da=pd.read_csv('titanic.csv')
da.head(10)

da.describe()

da.info()

# da.isnull().any()

# da.dropna(inplace=True)
# print(da)
# print(da.describe())

plt.hist(da["Survived"])
plt.xlabel("survived")
plt.show()

plt.pie([len(da[da['Survived']==1])/len(da["Survived"]),(len(da["Survived"])-len(da[da['Survived']==1]))/len(da["Survived"])],labels={"survived","notsurvived"})
plt.show()

sns.countplot(x='Survived',data=da)

sns.countplot(x="Survived",hue='Sex',data=da)

sns.countplot(x="Survived",hue='Pclass',data=da)

plt.hist(da['Age'].dropna())
plt.show()

plt.hist(da['Fare'])
plt.show()

da.isnull().sum()

da.drop('Cabin',axis=1,inplace=True)

da.head(10)

da.dropna(inplace=True)

da.describe()

da.isnull().sum()

# print(da['Sex'])
se=pd.get_dummies(da['Sex'],drop_first=True)

embar=pd.get_dummies(da['Embarked'],drop_first=True)

pclas=pd.get_dummies(da['Pclass'],drop_first=True)

da=pd.concat([da,se,embar,pclas],axis=1,)
da.head()

da.drop(['Pclass','Sex','Name','Embarked'],axis=1,inplace=True)

da.drop( ['Ticket','PassengerId'],axis=1,inplace=True)
da.head()

da.drop( ['Age'],axis=1,inplace=True)
da.head()

x=da.drop(['Survived'],axis=1)
y=da['Survived']
print(x)
print(y)
x.isnull().sum()

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split( x, y, test_size=0.3, random_state=1)
y_train.isnull().sum()

from sklearn.linear_model import LogisticRegression

logre=LogisticRegression()

logre.fit(X_train,y_train)

pre=logre.predict(X_test)

from  sklearn.metrics import confusion_matrixm

p12=confusion_matrix(y_test,pre)
print(p12)

p12.sum()
acc=((p12[0][0]+p12[1][1])/p12.sum())
print(acc)